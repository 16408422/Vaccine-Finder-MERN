{"ast":null,"code":"import _objectSpread from \"C:/Users/kogta/OneDrive/Desktop/cowin-final/CowinAPI-MERN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport { createContext, useContext } from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport parseProps from '@theme-ui/parse-props';\nvar __EMOTION_VERSION__ = packageInfo.version;\n\nvar jsx = function jsx(type, props) {\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  return jsx$1.apply(void 0, [type, parseProps(props)].concat(children));\n};\n/**\n * @internal for Babel JSX pragma\n * @see https://github.com/system-ui/theme-ui/issues/1603\n */\n\n\nvar createElement = jsx;\n/**\n * @internal\n */\n\nvar __ThemeUIContext = /*#__PURE__*/createContext({\n  __EMOTION_VERSION__: __EMOTION_VERSION__,\n  theme: {}\n});\n\nvar useThemeUI = function useThemeUI() {\n  return useContext(__ThemeUIContext);\n};\n\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nvar FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\nvar deepmergeOptions = {\n  isMergeableObject: function isMergeableObject(n) {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: function arrayMerge(_leftArray, rightArray) {\n    return rightArray;\n  }\n};\n/**\n * Deeply merge themes\n */\n\nvar merge = function merge(a, b) {\n  return deepmerge(a, b, deepmergeOptions);\n};\n\nfunction mergeAll() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return deepmerge.all(args, deepmergeOptions);\n}\n\nmerge.all = mergeAll;\n/**\n * @internal\n */\n\nvar __ThemeUIInternalBaseThemeProvider = function __ThemeUIInternalBaseThemeProvider(_ref) {\n  var context = _ref.context,\n      children = _ref.children;\n  return jsx(ThemeContext.Provider, {\n    value: context.theme\n  }, jsx(__ThemeUIContext.Provider, {\n    value: context,\n    children: children\n  }));\n};\n\nfunction ThemeProvider(_ref2) {\n  var theme = _ref2.theme,\n      children = _ref2.children;\n  var outer = useThemeUI();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n\n  var context = typeof theme === 'function' ? _objectSpread(_objectSpread({}, outer), {}, {\n    theme: theme(outer.theme)\n  }) : merge.all({}, outer, {\n    theme: theme\n  });\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context: context\n  }, children);\n}\n\nexport { ThemeProvider, __ThemeUIContext, __ThemeUIInternalBaseThemeProvider, createElement, jsx, merge, useThemeUI };","map":{"version":3,"sources":["C:/Users/kogta/OneDrive/Desktop/cowin-final/CowinAPI-MERN/node_modules/@theme-ui/core/dist/theme-ui-core.esm.js"],"names":["jsx","jsx$1","ThemeContext","createContext","useContext","deepmerge","packageInfo","parseProps","__EMOTION_VERSION__","version","type","props","children","createElement","__ThemeUIContext","theme","useThemeUI","canUseSymbol","Symbol","for","REACT_ELEMENT","FORWARD_REF","deepmergeOptions","isMergeableObject","n","$$typeof","arrayMerge","_leftArray","rightArray","merge","a","b","mergeAll","args","all","__ThemeUIInternalBaseThemeProvider","context","Provider","value","ThemeProvider","outer","process","env","NODE_ENV","console","warn"],"mappings":"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","sourcesContent":["import { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport { createContext, useContext } from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport parseProps from '@theme-ui/parse-props';\n\nconst __EMOTION_VERSION__ = packageInfo.version;\nconst jsx = (type, props, ...children) => jsx$1(type, parseProps(props), ...children);\n/**\n * @internal for Babel JSX pragma\n * @see https://github.com/system-ui/theme-ui/issues/1603\n */\n\nconst createElement = jsx;\n\n/**\n * @internal\n */\nconst __ThemeUIContext = /*#__PURE__*/createContext({\n  __EMOTION_VERSION__,\n  theme: {}\n});\nconst useThemeUI = () => useContext(__ThemeUIContext);\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\nconst deepmergeOptions = {\n  isMergeableObject: n => {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: (_leftArray, rightArray) => rightArray\n};\n/**\n * Deeply merge themes\n */\n\nconst merge = (a, b) => deepmerge(a, b, deepmergeOptions);\n\nfunction mergeAll(...args) {\n  return deepmerge.all(args, deepmergeOptions);\n}\n\nmerge.all = mergeAll;\n\n/**\n * @internal\n */\nconst __ThemeUIInternalBaseThemeProvider = ({\n  context,\n  children\n}) => jsx(ThemeContext.Provider, {\n  value: context.theme\n}, jsx(__ThemeUIContext.Provider, {\n  value: context,\n  children\n}));\nfunction ThemeProvider({\n  theme,\n  children\n}) {\n  const outer = useThemeUI();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n\n  const context = typeof theme === 'function' ? { ...outer,\n    theme: theme(outer.theme)\n  } : merge.all({}, outer, {\n    theme\n  });\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context\n  }, children);\n}\n\nexport { ThemeProvider, __ThemeUIContext, __ThemeUIInternalBaseThemeProvider, createElement, jsx, merge, useThemeUI };\n"]},"metadata":{},"sourceType":"module"}