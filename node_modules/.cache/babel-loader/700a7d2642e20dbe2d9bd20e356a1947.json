{"ast":null,"code":"import _defineProperty from \"C:/Users/kogta/OneDrive/Desktop/cowin-final/CowinAPI-MERN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:/Users/kogta/OneDrive/Desktop/cowin-final/CowinAPI-MERN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/kogta/OneDrive/Desktop/cowin-final/CowinAPI-MERN/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\n\nvar toVarName = function toVarName(key) {\n  return \"--theme-ui-\".concat(key.replace('-__default', ''));\n};\n\nvar toVarValue = function toVarValue(key) {\n  return \"var(\".concat(toVarName(key), \")\");\n};\n\nvar join = function join() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.filter(Boolean).join('-');\n};\n\nvar reservedKeys = {\n  useCustomProperties: true,\n  initialColorModeName: true,\n  printColorModeName: true,\n  initialColorMode: true,\n  useLocalStorage: true\n};\n\nvar toCustomProperties = function toCustomProperties(obj, parent, themeKey) {\n  var next = Array.isArray(obj) ? [] : {};\n\n  for (var key in obj) {\n    var value = obj[key];\n    var name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n\n    if (reservedKeys[key]) {\n      next[key] = value;\n      continue;\n    }\n\n    next[key] = toVarValue(name);\n  }\n\n  return next;\n};\n\nvar objectToVars = function objectToVars(parent, obj) {\n  var vars = {};\n\n  for (var key in obj) {\n    if (key === 'modes') continue;\n    var name = join(parent, key);\n    var value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = _objectSpread(_objectSpread({}, vars), objectToVars(name, value));\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n}; // create root styles for color modes\n\n\nvar createColorStyles = function createColorStyles() {\n  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = theme.config || theme || {},\n      useCustomProperties = _ref.useCustomProperties,\n      initialColorModeName = _ref.initialColorModeName,\n      printColorModeName = _ref.printColorModeName,\n      useRootStyles = _ref.useRootStyles;\n\n  var colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n\n  if (useCustomProperties === false) {\n    return css({\n      html: {\n        color: 'text',\n        bg: 'background'\n      }\n    })(theme);\n  }\n\n  var modes = colors.modes || {};\n  var styles = objectToVars('colors', colors);\n  Object.keys(modes).forEach(function (mode) {\n    var key = \"&.theme-ui-\".concat(mode);\n    styles[key] = objectToVars('colors', modes[mode]);\n  });\n\n  if (printColorModeName) {\n    var mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = objectToVars('colors', mode);\n  }\n\n  var colorToVarValue = function colorToVarValue(color) {\n    return toVarValue(\"colors-\".concat(color));\n  };\n\n  return css({\n    html: _objectSpread(_objectSpread({}, styles), {}, {\n      color: colorToVarValue('text'),\n      bg: colorToVarValue('background')\n    })\n  })(theme);\n};\n\nvar STORAGE_KEY = 'theme-ui-color-mode';\nvar storage = {\n  get: function get() {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  },\n  set: function set(value) {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  }\n};\n\nvar getPreferredColorScheme = function getPreferredColorScheme() {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    if (window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light';\n    }\n  }\n\n  return null;\n};\n\nvar getModeFromClass = function getModeFromClass() {\n  var mode;\n\n  if (typeof document !== 'undefined') {\n    document.documentElement.classList.forEach(function (className) {\n      if (className.startsWith('theme-ui-')) {\n        mode = className.replace('theme-ui-', '');\n      }\n    });\n  }\n\n  return mode;\n};\n\nvar useColorModeState = function useColorModeState() {\n  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref2 = theme.config || theme,\n      initialColorModeName = _ref2.initialColorModeName,\n      useColorSchemeMediaQuery = _ref2.useColorSchemeMediaQuery,\n      useLocalStorage = _ref2.useLocalStorage;\n\n  var _useState = useState(function () {\n    var modeFromClass = getModeFromClass();\n\n    if (modeFromClass) {\n      return modeFromClass;\n    }\n\n    var preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      mode = _useState2[0],\n      setMode = _useState2[1]; // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n\n\n  useEffect(function () {\n    var stored = useLocalStorage !== false && storage.get();\n\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n      document.body.classList.remove('theme-ui-' + stored);\n    }\n\n    if (stored && stored !== mode) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      mode = stored;\n      setMode(stored);\n    }\n  }, []); // when mode changes, we save it to localStorage\n\n  React.useEffect(function () {\n    if (mode && useLocalStorage !== false) {\n      storage.set(mode);\n    }\n  }, [mode, useLocalStorage]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var _theme$colors;\n\n    if ((_theme$colors = theme.colors) != null && _theme$colors.modes && initialColorModeName && Object.keys(theme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  return [mode, setMode];\n};\n\nfunction useColorMode() {\n  var _useThemeUI = useThemeUI(),\n      colorMode = _useThemeUI.colorMode,\n      setColorMode = _useThemeUI.setColorMode;\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(\"[useColorMode] requires the ColorModeProvider component\");\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n\n  return [colorMode, setColorMode];\n}\n\nvar omitModes = function omitModes(colors) {\n  var res = _objectSpread({}, colors);\n\n  delete res.modes;\n  return res;\n};\n\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (var _i = 0, _Object$entries = Object.entries(colors); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    }\n\n    if (typeof value === 'object') {\n      outerThemeRawColors[key] = _objectSpread(_objectSpread({}, outerThemeRawColors[key]), copyRawColors(value, {}));\n    }\n  }\n\n  return outerThemeRawColors;\n}\n\nvar ColorModeProvider = function ColorModeProvider(_ref3) {\n  var children = _ref3.children;\n  var outer = useThemeUI();\n  var outerTheme = outer.theme;\n\n  var _useColorModeState = useColorModeState(outerTheme),\n      _useColorModeState2 = _slicedToArray(_useColorModeState, 2),\n      colorMode = _useColorModeState2[0],\n      setColorMode = _useColorModeState2[1];\n\n  var theme = useMemo(function () {\n    var res = _objectSpread({}, outerTheme);\n\n    var modes = get(res, 'colors.modes', {});\n    var currentColorMode = get(modes, colorMode, {});\n\n    if (colorMode) {\n      res.colors = _objectSpread(_objectSpread({}, res.colors), currentColorMode);\n    }\n\n    var _ref4 = outerTheme.config || outerTheme,\n        useCustomProperties = _ref4.useCustomProperties,\n        _ref4$initialColorMod = _ref4.initialColorModeName,\n        initialColorModeName = _ref4$initialColorMod === void 0 ? '__default' : _ref4$initialColorMod;\n\n    var outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n\n    if (useCustomProperties !== false) {\n      var alreadyHasRawColors = res.rawColors != null;\n      var colors = res.colors || {};\n\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = _objectSpread({}, outerThemeRawColors);\n        copyRawColors(colors, outerThemeRawColors);\n\n        if ('modes' in outerThemeRawColors) {\n          var _res$rawColors;\n\n          res.rawColors = _objectSpread(_objectSpread({}, outerThemeRawColors), {}, {\n            modes: _objectSpread(_objectSpread({}, (_res$rawColors = res.rawColors) == null ? void 0 : _res$rawColors.modes), {}, _defineProperty({}, initialColorModeName, omitModes(outerThemeRawColors)))\n          });\n        } else {\n          res.rawColors = outerThemeRawColors;\n        }\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          var _modes = _objectSpread(_defineProperty({}, initialColorModeName, omitModes(outerThemeRawColors)), outerThemeRawColors.modes);\n\n          res.rawColors = _objectSpread(_objectSpread({}, colors), {}, {\n            modes: _modes\n          });\n          /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n\n    return res;\n  }, [colorMode, outerTheme]);\n\n  var context = _objectSpread(_objectSpread({}, outer), {}, {\n    theme: theme,\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  });\n\n  var isTopLevelColorModeProvider = outer.setColorMode === undefined;\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context: context\n  }, isTopLevelColorModeProvider ? jsx(Global, {\n    styles: function styles() {\n      return createColorStyles(theme);\n    }\n  }) : jsx('div', {\n    className: 'theme-ui__nested-color-mode-provider',\n    style: createColorStyles(theme)['html']\n  }), children);\n};\n\nvar noflash = \"(function() { try {\\n  var mode = localStorage.getItem('theme-ui-color-mode');\\n  if (!mode) return\\n  document.documentElement.classList.add('theme-ui-' + mode);\\n  document.body.classList.add('theme-ui-' + mode);\\n} catch (e) {} })();\";\n\nvar InitializeColorMode = function InitializeColorMode() {\n  return jsx('script', {\n    key: 'theme-ui-no-flash',\n    dangerouslySetInnerHTML: {\n      __html: noflash\n    }\n  });\n};\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };","map":{"version":3,"sources":["C:/Users/kogta/OneDrive/Desktop/cowin-final/CowinAPI-MERN/node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js"],"names":["React","useMemo","useState","useEffect","useThemeUI","jsx","__ThemeUIInternalBaseThemeProvider","css","get","Global","toVarName","key","replace","toVarValue","join","args","filter","Boolean","reservedKeys","useCustomProperties","initialColorModeName","printColorModeName","initialColorMode","useLocalStorage","toCustomProperties","obj","parent","themeKey","next","Array","isArray","value","name","objectToVars","vars","createColorStyles","theme","config","useRootStyles","colors","rawColors","html","color","bg","modes","styles","Object","keys","forEach","mode","colorToVarValue","STORAGE_KEY","storage","window","localStorage","getItem","e","console","warn","set","setItem","getPreferredColorScheme","matchMedia","matches","getModeFromClass","document","documentElement","classList","className","startsWith","useColorModeState","useColorSchemeMediaQuery","modeFromClass","preferredMode","setMode","stored","remove","body","process","env","NODE_ENV","_theme$colors","indexOf","useColorMode","colorMode","setColorMode","Error","omitModes","res","copyRawColors","outerThemeRawColors","entries","ColorModeProvider","children","outer","outerTheme","currentColorMode","alreadyHasRawColors","_res$rawColors","context","isTopLevelColorModeProvider","undefined","style","noflash","InitializeColorMode","dangerouslySetInnerHTML","__html"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\nimport { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\n\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\n\nconst toVarValue = key => `var(${toVarName(key)})`;\n\nconst join = (...args) => args.filter(Boolean).join('-');\nconst reservedKeys = {\n  useCustomProperties: true,\n  initialColorModeName: true,\n  printColorModeName: true,\n  initialColorMode: true,\n  useLocalStorage: true\n};\n\n\nconst toCustomProperties = (obj, parent, themeKey) => {\n  const next = Array.isArray(obj) ? [] : {};\n\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n\n    if (reservedKeys[key]) {\n      next[key] = value;\n      continue;\n    }\n    next[key] = toVarValue(name);\n  }\n\n  return next;\n};\nconst objectToVars = (parent, obj) => {\n  let vars = {};\n\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = { ...vars,\n        ...objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n}; // create root styles for color modes\n\nconst createColorStyles = (theme = {}) => {\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n\n  if (useCustomProperties === false) {\n    return css({\n      html: {\n        color: 'text',\n        bg: 'background'\n      }\n    })(theme);\n  }\n\n  const modes = colors.modes || {};\n  const styles = objectToVars('colors', colors);\n  Object.keys(modes).forEach(mode => {\n    const key = `&.theme-ui-${mode}`;\n    styles[key] = objectToVars('colors', modes[mode]);\n  });\n\n  if (printColorModeName) {\n    const mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = objectToVars('colors', mode);\n  }\n\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n\n  return css({\n    html: { ...styles,\n      color: colorToVarValue('text'),\n      bg: colorToVarValue('background')\n    }\n  })(theme);\n};\n\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  }\n};\n\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    if (window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light';\n    }\n  }\n\n  return null;\n};\n\nconst getModeFromClass = () => {\n  let mode;\n\n  if (typeof document !== 'undefined') {\n    document.documentElement.classList.forEach(className => {\n      if (className.startsWith('theme-ui-')) {\n        mode = className.replace('theme-ui-', '');\n      }\n    });\n  }\n\n  return mode;\n};\n\nconst useColorModeState = (theme = {}) => {\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = theme.config || theme;\n  let [mode, setMode] = useState(() => {\n    const modeFromClass = getModeFromClass();\n\n    if (modeFromClass) {\n      return modeFromClass;\n    }\n\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  }); // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n\n  useEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n      document.body.classList.remove('theme-ui-' + stored);\n    }\n\n    if (stored && stored !== mode) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      mode = stored;\n      setMode(stored);\n    }\n  }, []); // when mode changes, we save it to localStorage\n\n  React.useEffect(() => {\n    if (mode && useLocalStorage !== false) {\n      storage.set(mode);\n    }\n  }, [mode, useLocalStorage]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var _theme$colors;\n\n    if ((_theme$colors = theme.colors) != null && _theme$colors.modes && initialColorModeName && Object.keys(theme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  return [mode, setMode];\n};\n\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n\n  return [colorMode, setColorMode];\n}\n\nconst omitModes = colors => {\n  const res = { ...colors\n  };\n  delete res.modes;\n  return res;\n};\n\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    }\n\n    if (typeof value === 'object') {\n      outerThemeRawColors[key] = { ...outerThemeRawColors[key],\n        ...copyRawColors(value, {})\n      };\n    }\n  }\n\n  return outerThemeRawColors;\n}\n\nconst ColorModeProvider = ({\n  children\n}) => {\n  const outer = useThemeUI();\n  const outerTheme = outer.theme;\n  const [colorMode, setColorMode] = useColorModeState(outerTheme);\n  const theme = useMemo(() => {\n    const res = { ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n\n    if (colorMode) {\n      res.colors = { ...res.colors,\n        ...currentColorMode\n      };\n    }\n\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = { ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n\n        if ('modes' in outerThemeRawColors) {\n          var _res$rawColors;\n\n          res.rawColors = { ...outerThemeRawColors,\n            modes: { ...((_res$rawColors = res.rawColors) == null ? void 0 : _res$rawColors.modes),\n              [initialColorModeName]: omitModes(outerThemeRawColors)\n            }\n          };\n        } else {\n          res.rawColors = outerThemeRawColors;\n        }\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = { ...colors,\n            modes\n          };\n          /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n\n    return res;\n  }, [colorMode, outerTheme]);\n  const context = { ...outer,\n    theme,\n    colorMode,\n    setColorMode\n  };\n  const isTopLevelColorModeProvider = outer.setColorMode === undefined;\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context\n  }, isTopLevelColorModeProvider ? jsx(Global, {\n    styles: () => {\n      return createColorStyles(theme);\n    }\n  }) : jsx('div', {\n    className: 'theme-ui__nested-color-mode-provider',\n    style: createColorStyles(theme)['html']\n  }), children);\n};\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n  document.body.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\nconst InitializeColorMode = () => jsx('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };\n"]},"metadata":{},"sourceType":"module"}