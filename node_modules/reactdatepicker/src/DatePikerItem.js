/**
 * Created by chenlin on 2017/10/17 0017.
 */
import React  from 'react';
import * as TimeUtil  from './util';
import { addPrefixCss, formatCss ,shallowEqual} from './util.js';
const dateHeight = 30;                              // 每个日期的高度
const dateLength = 10;                              // 日期的个数
const midIndex = Math.floor(dateLength / 2);     // 日期数组中间值的索引
const midY = - dateHeight * midIndex;       // translateY值
export default class DatePickerItem extends React.Component {
    constructor(props) {
        super(props);
        this.animating = false;                 // 判断是否在transition过渡动画之中
        this.touchY = 0;                        // 保存touchstart的pageY
        this.translateY = 0;                    // 容器偏移的距离
        this.currentIndex = midIndex;       // 滑动中当前日期的索引
        this.state = {
            translateY: midY,
            marginTop: (this.currentIndex - midIndex) * dateHeight,
        };
    }
    
    componentWillMount() {
        this.iniDates(this.props.value);
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.value.getTime() === this.props.value.getTime()) {
            return;
        }
        this.iniDates(nextProps.value);
        this.currentIndex = midIndex;
        this.setState({
            translateY: midY,
            marginTop: (this.currentIndex - midIndex) * dateHeight,
        });
    }
    shouldComponentUpdate(nextProps, nextState) {
        return nextProps.value.getTime() !== this.props.value.getTime() ||
            !shallowEqual(nextState, this.state);
    }
    iniDates=(date)=> {
        const { typeName } = this.props;
        const dates = Array(...Array(dateLength)).map((value, index) =>
            TimeUtil[`next${typeName}`](date, index - midIndex));
        this.setState({ dates });
    }
    updateDates=(direction)=>{
        const { typeName } = this.props;
        const { dates } = this.state;
        if (direction === 1) {
            this.currentIndex ++;
            this.setState({
                dates: [
                    ...dates.slice(1),
                    TimeUtil[`next${typeName}`](dates[dates.length - 1], 1),
                ],
                marginTop: (this.currentIndex - midIndex) * dateHeight,
            });
        } else {
            this.currentIndex --;
            this.setState({
                dates: [
                    TimeUtil[`next${typeName}`](dates[0], -1),
                    ...dates.slice(0, dates.length - 1),
                ],
                marginTop: (this.currentIndex - midIndex) * dateHeight,
            });
        }
    }
    checkIsUpdateDates=(direction, translateY)=>{
        return direction === 1 ?
            this.currentIndex * dateHeight + dateHeight / 2 < -translateY :
            this.currentIndex * dateHeight - dateHeight / 2 > -translateY;
    }
    clearTransition=(obj)=> {
        addPrefixCss(obj, { transition: '' });
    }
    moveToNext=(direction)=>{
        const date = this.state.dates[midIndex];
        const { max, min } = this.props;
        if (direction === -1 && date.getTime() < min.getTime()) {
            this.updateDates(1);
        } else if (direction === 1 && date.getTime() > max.getTime()) {
            this.updateDates(-1);
        }
        this.moveTo(this.refs.scroll, this.currentIndex);
    }
    moveTo=(obj, currentIndex)=>{
        this.animating = true;
        addPrefixCss(obj, { transition: 'transform .2s ease-out' });
        this.setState({
            translateY: -currentIndex * dateHeight,
        });
        setTimeout(() => {
            this.animating = false;
            this.props.onSelect(this.state.dates[midIndex]);
            this.clearTransition(this.refs.scroll);
        }, 200);
    }
    
    handleStart=(event)=>{
        event.preventDefault();
        this.touchY = event.pageY || event.targetTouches[0].pageY;
        this.translateY = this.state.translateY;
    }
    handleMove=(event)=>{
        event.preventDefault();
        const touchY = event.pageY || event.targetTouches[0].pageY;
        const dir = touchY - this.touchY;
        const translateY = this.translateY + dir;
        const direction = dir > 0 ? -1 : 1;
        const date = this.state.dates[midIndex];
        const { max, min } = this.props;
        if (date.getTime() < min.getTime() ||
            date.getTime() > max.getTime()) {
            return;
        }
        if (this.checkIsUpdateDates(direction, translateY)) {
            this.updateDates(direction);
        }
        this.setState({ translateY });
    }
    handleEnd=(event)=>{
        event.preventDefault();
        const touchY = event.pageY || event.changedTouches[0].pageY;
        const dir = touchY - this.touchY;
        const direction = dir > 0 ? -1 : 1;
        this.moveToNext(direction);
    }
    
    renderDatepickerItem=()=> {
        return this.state.dates.map((date,index)=>{
            const className =
                      (date < this.props.min || date > this.props.max) ?
                          'disabled' : '';
            return (
                <li
                    key={index}
                    className={className}>
                    {TimeUtil.convertDate(date, this.props.format)}
                </li>
            );
        })
    }
    render() {
        const scrollStyle = formatCss({
            transform: `translateY(${this.state.translateY}px)`,
            marginTop: this.state.marginTop,
        });
        return (
            <div className="datepicker-item"
                 onTouchStart={this.handleStart}
                 onTouchMove={this.handleMove}
                 onTouchEnd={this.handleEnd}
            >
                <div
                    className="datepicker-viewport">
                    <div className="datepicker-wheel">
                        <ul ref="scroll"
                            className="datepicker-scroll"
                            style={scrollStyle}>
                            {this.renderDatepickerItem()}
                        </ul>
                    </div>
                </div>
            </div>
        );
    }
}